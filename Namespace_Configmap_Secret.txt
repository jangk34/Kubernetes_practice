Namespace 네임스페이스 ]] = 리소스 구분을 쉽게 해줌

쿠버네티스상 네임스페이스 역할 파악
- 리소스를 구분 ( 포드,레플리카셋, 디플로이먼트, 서비스등이 하나로 묶여있는 그룹 )
- 리눅스 네임스페이스와의 차이 == >  리눅스 ns는 컨테이너의 격리된 공간을 생성
- 라벨과의 공통점 및 차이점 
== > 공통점 : 라벨 또한 리소스를 분류하고 구분
== > 차이점 : 네임스페이스는 사이드카 컨테이너를 붙이도록 설정 가능
++ 도커는 컨테이너를 논리적으로 구분하는 방법 X 

[ 네임스페이스 생성 ]
kubectl create namespace "네임스페이스 명"

[ 네임스페이스 조회 ]
kubectl get ns | grep "네임스페이스 명"

[ 네임스페이스 삭제 ] - 모든 리소스도 삭제
kubectl delete namespace "네임스페이스 명"

--------

[[ Configmap 컨피그맵 ]] = 설정값을 담아 저장할 수 있는 오브젝트 / 네임스페이스 별로 컨피그맵이 존재, 네임스페이스에 종속되는 쿠버네티스 오브젝트 
--> ★ 애플리케이션 설정값을 별도로 분리해서 관리할 수 있는 장점 

[ Secret 시크릿 ] = 비밀값

[ 컨피그맵 생성 ]
kubectl create configmap "컨피그맵 이름" "각종 설정값들" 
ex) kubectl create configmap log-level-configmap --from-literal LOG_LEVEL=DEBUG

--from literal 옵션은 여러개의 키 값을 컨피그맵에 사용하도록 설정
ex) kubectl create configmap  start-k8s --from-literal k8s=kubernetes --from-literal container=docker

[ 생성한 컨피그맵 설정값 확인 ]
kubectl get configmap -o yaml

--------------------------------
apiVersion: v1
kind: Pod
metadata:
  name: container-env-example
spec:
  containers:
    - name: my-container
      image: busybox
      args: ['tail', '-f', '/dev/null']
      envFrom:                                          # 컨피그맵에 존재하는 모든 키-값 쌍을 환경변수로 가져옴
      - configMapRef:
          name: log-level-configmap                    # 키 값 쌍이 1개 존재하는 컨피그맵
      - configMapRef:  
          name: start-k8s                                   # 키 값 쌍이 2개 존재하는 컨피그맵
~

------------------------------
[ 환경변수 출력 ]
kubectl exec container-env-example. env

------------------------------
apiVersion: v1
kind: Pod
metadata:
  name: container-selective-env-example
spec:
  containers:
    - name: my-container
      image: busybox
      args: ['tail', '-f', '/dev/null']
      env:
      - name: ENV_KEYNAME_1     # (1.1) 컨테이너에 새롭게 등록될 환경 변수 이름
        valueFrom:                          # 컨피그맵에 존재하는 키-값 쌍 중에서 원하는 데이터만 선택적으로 가져옴
          configMapKeyRef:
            name: log-level-configmap
            key: LOG_LEVEL
      - name: ENV_KEYNAME_2  # (1.2) 컨테이너에 새롭게 등록될 환경 변수 이름
        valueFrom: 
          configMapKeyRef:
            name: start-k8s      # (2) 참조할 컨피그맵의 이름
            key: k8s             # (3) 가져올 데이터 값의 키
                                 # 최종 결과 -> ENV_KEYNAME_2=$(k8s 키에 해당하는 값)
                                 #              ENV_KEYNAME_2=kubernetes

--------------------------

- envFrom : 컨피그맵에 존재하는 모든 키-값 쌍을 가져옴
- valueFrom / configMapKeyRef : 컨피그맵에 존재하는 키-값 쌍 중에서 원하는 데이터만 가져옴


--------------------------

apiVersion: v1
kind: Pod
metadata:
  name: selective-cm-volume-pod
spec:
  containers:
    - name: my-container
      image: busybox
      args: [ "tail", "-f", "/dev/null" ]
      volumeMounts:
      - name: configmap-volume
        mountPath: /etc/config       # 마운트되는 위치는 변경되지 않았습니다.
  volumes:
    - name: configmap-volume
      configMap:
        name: start-k8s
        items:                       # 컨피그맵에서 가져올 키-값의 목록을 나열합니다.
        - key: k8s                    # k8s라는 키에 대응하는 값을 가져옵니다.
          path: k8s_fullname         # 최종 파일 이름은 k8s_fullname이 됩니다.
~

----------------------------------

- 정적파일을 포드에 제공할 경우 --from-file 옵션 사용,
- 여러 개의 환경 변수를 포드 제공할 경우 --from-env-file 옵션 사용

[[ Secret 시크릿 ]] = ssh키, 비밀번호 등 민감한 정보 저장 용도로 사용, 네임스페이스에 종속되는 쿠버네티스 오브젝트 

[ --from-literal 명령어 ]
값을 가져와 사용함

[ 시크릿 작성 ]
vi kustomization.yaml

[ 시크릿 생성 ]
kubectl apply -k .




