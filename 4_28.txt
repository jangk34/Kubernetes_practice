기본적으로 도커 데몬은 HTTPS를 사용하지 않은 레지스트리 컨테이너에 접근하지 못하도록 설정함.

##사설 레지스트리 컨테이너의 인증을 위해 Nginx를 통해 레지스트리 컨테이너를 제어하자, 인증서가 없으므로 만들자

mkdir certs

openssl genrsa -out ./certs/ca.key 2048 ##인증 기관 Key 생성(ROOT CA)

openssl req -x509 -new -key ./certs/ca.key -days 365 -out ./certs/ca.crt ##인증 요청서 생성

openssl genrsa -out ./certs/domain.key 2048 ##Public Key 생성

openssl req -new -key ./certs/domain.key -subj /CN=호스트IP -out ./certs/domain.csr ##Public 인증서 생성

echo subjectAltName = IP:13.125.189.252 > extfile.cnf 

openssl x509 -req -in ./certs/domain.csr -CA ./certs/ca.crt -CAkey ./certs/ca.key -CAcreateserial -out ./certs/domain.crt -days 365 -extfile extfile.cnf ##Root, Public 인증서를 이용하여 Private 인증서 생성

yum -y install httpd-tools ##htpasswd 설치

htpasswd -c htpasswd leedoing ##

mv htpasswd certs/


(nginx ssl config, p.101)

docker run -d --name myregistry --restart=always registry:2.6 ##레지스트리 재생성

docker run -d --name nginx_frontend -p 443:443 --link myregistry:registry -v $(pwd)/certs/:/etc/nginx/conf.d nginx:1.9 #certs를 볼륨으로 묶고 link Alias를 이용하여 regstry 연동

인증 Error 발생(신뢰할 수 없는 Self-signed 인증서는 도커에서 차단)

## 컨테이너 생성 확인
docker ps --format "table {{.ID}}\t{{.Image}}\t{{.Ports}}"


## 도커 재시작
service docker restart 
docker start nginx_frontend 

[ 사설 레지스트리 RESTful API ]
curl -u jangk34:mypassword https://127.0.0.1/v2/_catalog =  curl -u 옵션은 HTTPS와 로그인으로 인증을 설정했다면 사용 가능



도커 이미지는 이미지에 대한 정보를 저장하는 매니페스트, 실제로 이미지에 레이어 파일을 저장하는 바이너리 파일로 나뉨
그리고 매니페스트와 각 레이어에 해당하는 파일은 서로 고유하게 식별하기 위한 ID로 다이제스트 값을 가짐
그렇기 때문에 매니페스트와 레이어 파일을 따로 삭제해야함

★★ XXXX : XXXX = 호스트 포트 : 컨테이너 포트

[ Dockerfile ] = 컨테이너에서 수행해야 할 작업을 명시

vi Dockerfile

FROM ubuntu:20.04   ## 생성할 이미지의 베이스가 될 이미지
MAINTAINER jangk34   ## 개발자 정보
LABEL "purpose"="practice"   ## 이미지에 메타데이터를 추가
RUN apt-get update   ## 이미지를 만들기 위해 컨테이너 내부에서 명령어 실행
RUN apt-get install apache2 -y
ADD test.html /var/www/html   ## 파일을 이미지에 추가
WORKDIR /var/www/html   ## 명령어를 실행할 디렉터리를 나타냄
RUN ["/bin/bash", "-c", "echo hello >> test2.html"]  
EXPOSE 80  ## Dockerfile의 빌드로 생성된 이미지에서 컨테이너가 사용할 포트 설정
CMD apachectl -DFOREGROUND  ## 컨테이너가 시작될 때마다 실행할 명령어 설정

## ENV = 환경변수 지정
## VOLUME = 빌드된 이미지로 컨테이너를 생성했을 때 호스트와 공유할 컨테이너 내부의 디렉터리를 설정합니다.
## ARG = 변수 추가


docker build -t mybuild:0.0 ./ = Dockerfile 빌드, 끝에는 Dockerfile이 저장된 경로를 입력 ex) ./는 현재 디렉터리

docker run -d -P --name 컨테이너명" "이미지명:태그" = -P옵션은 이미지에 설정된 EXPOSE의 모든 포트를 호스트에 연결하도록 설정

[ dockerfile 예외 처리 ] - 반드시 dockerfile 디렉터리에 위치해야함

vi .dockerignore

tset2.html
*.html   
*/*.html   ## */ = 현 디렉터리 레벨
test.htm?   ## ? 에 문자가 들어가는 파일을 제외
 ! test*.html ## test로 시작하는 html 파일은 컨텍스트에서 제외하지 않음

ENTRYPOINT = 항상실행, 컨테이너가 시작될 때 수행할 명령을 지정,해당 컨테이너가 수행될 때 반드시 ENTRYPOINT에서 지정한 명령을 수행되도록 지정 
CMD = docker run 명령어를 실행할때, 컨테이너가 시작될 때 수행할 명령을 지정, Dockerfile에 지정된 CMD값을 대신 하여 지정한 인자값으로 변경하여 실행되게 된다.
참고로 -f는 도커파일의 파일명을 지정하는 옵션이고, -t는 생성할 이미지의 이름을 지정하는 옵션입니다.
CMD는 컨테이너 생성 후 출력을 하고 컨테이너가 종료
ENTRYPOINT는 CMD와 같이 생성 후 출력, 하지만 추가로 넣으면 붙어서 실행
고로 ENTRYPOINT는 컨테이너가  최초에 꼭 실행해야만 하는 명령어가 있을때, CMD는 컨테이너 실행 시 시작되는 명령어지만 변경할 수 있을 때 활용
