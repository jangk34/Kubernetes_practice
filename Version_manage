
[ 디플로이먼트를 이용한 레플리카셋의 버전 관리 ] 
*쿠버네티스는 지속적 배포 도구를 사용한 애플리케이션 배포 필요
*레플리카셋(애플리케이션)의 변경 사항을 저장하는 리비전(정정 내용)을 디플로이먼트가 관리 하기 때문에 포드 생성시 디플로이먼트 사용

[ 디플로이먼트 변경사항 적용 --record ]
kubectl apply -f "디플로이먼트명.yaml" --record

[ 히스토리 조회 ]
kubectl rollout history deployment "디플로이먼트 명"

[ ReCreate ] 
일시적으로 사용자의 요청을 처리하지 못해도 괜찮은 어플리케이션
strategy : 
       type : Recreate 
*단, 애플리케이션 중단이 허용되지 않을때는 적절하지 않음

[ RollingUpdate ] 
옵션
-maxUnavailable : 업데이트중 포드의 개수가 일정 값 이하로 내려가지 않도록 유지
-maxSurge : 업데이트중 전체 포드의 개수가 레플리카 값보다 얼마나 더 많이 존재할 수 있는지 설정

[ 포드 상태와 생애주기 ]
Pending : 포드를 생성하는 요청이 API 서버에 의해 승인 됐지만 특정 이유로 아직 생성되지 않은 상태
Terminating : 포드가 삭제 또는 퇴거 되기 위한 상태에 머물러 있는 경우
Completed : 포드가 정상적으로 실행돼 종료됐음을 의미
CrashLoopBackOff : 실패를 반복할수록 재시도하는 간격의 상태

restartPolicy : Never 설정 또는 OnFailure 시 포드 재시작 X
*OnFailure는 포드의 컨테이너가 실패했을 때, 즉 exit가 0이 아닌 종료 코드를 반환했을때만 포드를 재시작

[ Running 상태가 되기 위한 조건 ]
- Init컨테이너(애플리케이션 실행 전 초기화 수행 컨테이너)의 실행 -> postStart ( 컨테이너 시작 직후 아래와 같은 특정작업 수행 )

** postStart
1) HTTP 요청을 보냄
2) EXEC 실행

---- 애플리케이션 상태 검사 ----
livenessProbe - 컨테이너 내부 애플리케이션이 살아있는지 검사 -> 실패시 restartpolicy에따라 재시작
readinessProbe - 컨테이너 내부 아직 준비되지 않은 포드의 애플리케이션이 사용자 요청을 처리할 준비가 되어있는지 검사 
-> 실패시 서비스의 라우팅(네트워크 내에서 데이터를 전송시 최적의 경로 선택) 대상에서 제외
두가지 모두 아래의 방식중 하나를 선택 해서 상태 점검
가) httpGET
나) exec
다) tcpSocket

[ 애플리케이션 종료 ]
[ preStop ]
포드의 컨테이너가 종료되기전 실행되고자 하는 것을 기재하는 옵션

--grace-period="희망하는 초"  ex) 0일시에 그냥 강제종료**

