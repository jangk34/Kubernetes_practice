ML = 거의 모든 리소스 오브젝트들에 사용 됨 -> 고로 YAML 을 가장 잘 사용해야함

마스터노드 역할 - 클러스터 관리
워커 노드 역할 = 애플리케이션 컨테이너 생성

kubelet 이란 ? 컨테이너 생성,삭제,마스터노드간의 통신 역할을 하는 에이전트, 모든 노드에서 기본적으로 실행,
마스터노드에는 API서버 등이 컨테이너로 실행

컨테이너 애플리케이션 구동 하기위한 오브젝트 = POD,REPLICA SET,SERVICE,DEPLOYMENT

★중요 ! [ POD 포드 ] : 컨테이너를 다루는 기본 단위
1개 이상의 컨테이너로 구성된 컨테이너의 집합, 컨테이너 애플리케이션을 배포하기위한 기본 단위
1개의 포드 = 1개의 컨테이너 or 여러개의 컨테이너

도커와 같이 exec 명령어로 포드 컨테이너 내부 접속 가능  
ex) kubectl exec -it my-nginx-pod -c "접속할 컨테이너" bash
--> ★ 여기서 1개의 포드 내에 컨테이너가 2개 이상일시 컨테이너들은 네트워크와 같은 동일한 리눅스 네임스페이스 공유
--> 예를들어 기본 nginx 컨테이너와 nginx의  기능 확장을 위한 컨테이너가 추가될시 이를 사이드카(sidecar) 컨테이너라고 함
    사이드카 컨테이너는 포드내 다른 컨테이너와 네트워크 환경을 공유해 모두 같은 워커 노드에서 함께 실행

[ YAML 파일 구성 ]
-apiVersion = 파일에서 정의한 오브젝트의 API 버전을 나타냄 
-kind = 리소스 종류를 나타냄
-metadata = 라벨/주석/이름과 같은 리소스 부가 정보
-spec = 리소스 생성을 위한 자세한 정보 입력

[ 작성한 YAML파일 쿠버네티스상 생성 ]
kubectl apply -f

[ 특정 오브젝트 목록 확인 ]
kubectl get <오브젝트 이름> ex) pods

[ 생성된 리소스 자세한 정보 보기 ]
kubectl describe 

[ 포드 전체 목록(상태) 보기 ]
kubectl get pods -A

[ vi 줄차기 ]
:set number "특정 줄 " 

[ vi 문자 찾기 ]
/"특정문자" 

[ 오브젝트 삭제 ]
kubectl delete -f  ~.yaml





